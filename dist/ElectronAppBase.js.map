{"version":3,"sources":["ElectronAppBase.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AACjC,mCAAsC;AACtC,yBAAyB;AACzB,6BAA6B;AAC7B,6BAA6B;AAE7B,8CAA8C;AAC9C,+DAA6C;AAC7C,MAAM,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACpC,mCAAmC;AAKnC,0BAA0B;AAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAClB,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,SAAS,EAAE;QACxC,KAAK,EAAE,OAAO,CAAC,GAAG,EAAE;QACpB,QAAQ,EAAE,KAAK,CAAC,yBAAyB;KACzC,CAAC,CAAC;AACJ,CAAC;AA6CD;IAmCC,YAAoB,WAA+B,EAAE;QAAjC,aAAQ,GAAR,QAAQ,CAAyB;QACpD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAkC,CAAC;QAE1D,IAAI,CAAC,MAAM,GAAG,IAAI,qBAAY,EAAE,CAAC;QACjC,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,GAAG,MAAM,CAAC,OAAO,SAAS,CAAC;QAE5C,IAAI,WAAW,GAAuB;YACrC,WAAW,EAAE,KAAK;YAClB,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC;YAC9C,wBAAwB,EAAE,IAAI;YAC9B,gBAAgB,EAAE,IAAI;YACtB,gBAAgB,EAAE,WAAW;YAC7B,cAAc,EAAE,KAAK;SACrB,CAAC;QAEF,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC1D,IAAI,CAAC,UAAU,EAAE,CAAC;QAElB,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC;IACnB,CAAC;IA7CD;;OAEG;IACH,IAAW,QAAQ;QAClB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,IAAc,IAAI;QACjB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACnB,CAAC;IAED;;MAEE;IACF,IAAc,OAAO;QACpB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IACtB,CAAC;IA8BD;;OAEG;IACI,KAAK;QACX,IAAI,CAAC,UAAU,EAAE,CAAC;QAElB,IAAI,CAAC,YAAY,EAAE,CAAC;QAEpB,IAAI,YAAY,GAAG,IAAI,OAAO,CAAO,OAAO;YAC3C,oFAAoF;YACpF,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,YAAY,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC;YACpE,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC1B,OAAO,EAAE,CAAC;QACX,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACpC,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC;QACjE,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE;YAC7B,YAAY,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,GAAG,CAAC,KAA0B,EAAE,OAAY;QAClD,MAAM,CAAC,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM;YACxC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC,KAAK;gBACtC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACX,MAAM,CAAC,KAAK,CAAC,CAAC;oBACd,MAAM,CAAC;gBACR,CAAC;gBACD,OAAO,EAAE,CAAC;YACX,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACI,IAAI,CAAC,QAAiB,KAAK;QACjC,IAAI,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QAExE,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,OAAO;YAC/C,kEAAkE;YAClE,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE,IAAI,CAAC,CAAC;YAE1D,wEAAwE;YACxE,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACtB,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;gBAClB,MAAM,CAAC,IAAI,CAAC;YACb,CAAC;YACD,MAAM,CAAC,KAAK,CAAC;QACd,CAAC,CAAC,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,SAAS,CAA+B,MAAS;QACvD,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAEvC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,mBAAmB,EAAE,MAAM,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC,CAAC;QAEvF,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE;YACnB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAElC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBAAC,MAAM,CAAC;YAAC,CAAC;YAC3C,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,KAAK,EAAE,CAAC;QACf,MAAM,CAAC,MAAM,CAAC;IACf,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,IAAa;QAC1B,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC;YACjC,MAAM,CAAC;QACR,CAAC;QACD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC;IAC5C,CAAC;IAED;;;OAGG;IACI,YAAY,CAAC,IAAa;QAChC,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YAC5C,MAAM,CAAC;QACR,CAAC;QACD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;IACvD,CAAC;IAED;;;OAGG;IACI,eAAe,CAAC,OAA6C;QACnE,4BAAK,CAAC,aAAa,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACxC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAClC,CAAC;IAED;;OAEG;IACI,UAAU;QAChB,MAAM,CAAC,IAAI,OAAO,CAAO,CAAC,OAAO;YAChC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,YAAY;QAClB,MAAM,CAAC,IAAI,OAAO,CAAO,CAAC,OAAO;YAChC,IAAI,OAAO,GAAG;gBACb,QAAQ,EAAE;oBACT,UAAU;oBACV,SAAS;oBACT,YAAY;oBACZ,SAAS;oBACT,cAAc;oBACd,aAAa;oBACb,QAAQ;oBACR,gBAAgB;iBAChB;gBACD,MAAM,EAAE;oBACP,WAAW;oBACX,YAAY;oBACZ,UAAU;iBACV;gBACD,MAAM,EAAE,GAAG;aACX,CAAC;YAEF,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,cAAc;QACpB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC;IACrC,CAAC;IAGD;;;;OAIG;IACI,gBAAgB;QACtB,IAAI,QAAQ,GAAG,IAAI,CAAC,cAAc,EAAE,EACnC,eAAe,GAAG,IAAI,CAAC;QAExB,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC;YACxB,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC7D,eAAe,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAC9B,KAAK,CAAC;YACN,CAAC;QACF,CAAC;QAED,MAAM,CAAC,eAAe,CAAC;IACxB,CAAC;IAED;;OAEG;IACO,OAAO,CAAC,OAAe,EAAE,OAAQ;QAC1C,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QAExB,IAAI,OAAO,GAAG,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAEjD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;QACvB,CAAC;QAED,MAAM;YACL,MAAM,EAAE,OAAO,CAAC,MAAM;SACtB,CAAC;IACH,CAAC;IAED;;OAEG;IACO,WAAW;IACrB,CAAC;IAED;;OAEG;IACO,kBAAkB;IAC5B,CAAC;IAED;;OAEG;IACO,UAAU;IACpB,CAAC;IAED;;OAEG;IACO,SAAS;IACnB,CAAC;IAED;;OAEG;IACO,OAAO,CAAC,OAAe;QAChC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAC5B,CAAC;IAGO,kBAAkB;QACzB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC;QAAC,CAAC;QAEjE,yGAAyG;QACzG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAE1B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,GAAuB;YAC7C,GAAG,CAAC,KAAK,EAAE,CAAC;YACZ,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACJ,CAAC;IAEO,YAAY;QACnB,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;QAErB,wDAAwD;QACxD,yDAAyD;QACzD,sDAAsD;QACtD,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE;YACf,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,oCAAoC;QACpC,GAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE;YAC3B,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC,CAAC,CAAC;gBAC5C,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;YACnB,CAAC;QACF,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,EAAE,CAAC,UAAU,EAAE;YAClB,IAAI,CAAC,WAAW,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;IACJ,CAAC;IAEO,UAAU;QACjB,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC;QAExC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC7B,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACvB,CAAC;QAED,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,MAAM,CAAC;YACjC,UAAU,EAAE;gBACX,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;oBAChC,KAAK,EAAE,OAAO;iBACd,CAAC;gBACF,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;oBAC7B,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC;oBACzC,KAAK,EAAE,MAAM;iBACb,CAAC;aACF;SACD,CAAC,CAAC;IACJ,CAAC;IAEO,uBAAuB,CAAC,GAA2B;QAC1D;;WAEG;QACH,MAAM,MAAM,GAAG;YACd,IAAI,EAAE,EAAE;SACR,CAAC;QACF,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,MAAuC,EAAE,EAAyC;YAC7I,GAAG;YACH,MAAM,SAAS,GAAG,IAAI,CAAC;YACvB,IAAI,EAAE,GAAG,EAAE,GAAG,MAAM,EACnB,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,EAC5B,WAAW,GAAG,IAAI,CAAC;YAEpB,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBACd,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,GAAG,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;gBAC5C,iCAAiC;gBACjC,WAAW,GAAG,GAAG,MAAM,CAAC,OAAO,IAAI,GAAG,EAAE,CAAC;YAC1C,CAAC;YACD,IAAI;YACJ,wCAAwC;YACxC,gDAAgD;YAEhD,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;IACJ,CAAC;IAEO,gBAAgB;QACvB,MAAM,UAAU,GAAG,GAAG,MAAM,CAAC,OAAO,wBAAwB,CAAC;QAC7D,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,IAAI,WAAW,EACzD,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,IAAI,KAAK,CAAC;QAE9C,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAChC,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAC1B,CAAC;QAED,MAAM,CAAC,IAAI,OAAO,CAAO,OAAO;YAC/B,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC;gBAChC,MAAM,EAAE,MAAM,CAAC,OAAO;gBACtB,IAAI,EAAE,UAAU;aAChB,CAAC,CAAC;iBACF,MAAM,CAAC,IAAI,EAAE;gBACb,yBAAyB;gBACzB,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,SAAS,EAAE;oBACxC,KAAK,EAAE,UAAU,MAAM,IAAI,IAAI,EAAE;oBACjC,QAAQ,EAAE,KAAK;iBACf,CAAC,CAAC;gBAEH,OAAO,EAAE,CAAC;YACX,CAAC,CAAC;iBACD,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,KAAK,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QACvD,CAAC,CAAC;aACD,KAAK,CAAC,GAAG;YACT,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;YAC/B,OAAO,CAAC,IAAI,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;IACJ,CAAC;IAEO,kBAAkB;QACzB,4DAA4D;QAC5D,UAAU;QACV,2BAA2B;QAC3B,0CAA0C;QAC1C,gCAAgC;QAChC,IAAI;QACJ,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,iBAAiB,EAAE,CAAC,KAAK,EAAE,GAAG;YAC9C,IAAI,MAAM,GAAG,IAAI,EAChB,KAAK,GAAG,IAAI,EACZ,UAAU,GAAG,GAAG,CAAC,MAAM,CAAC;YAEzB,IAAI,CAAC;gBACJ,mDAAmD;gBACnD,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;oBACjB,yBAAyB;oBACzB,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;gBACjD,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBAC1C,yCAAyC;oBACzC,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;oBAC5C,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;gBACvD,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,MAAM,gBAAgB,CAAC;gBACxB,CAAC;YACF,CAAC;YACD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACX,KAAK,GAAG,EAAE,CAAC;YACZ,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAE,CAAC,CAAC,CAAC;gBAC1C,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE;oBAC/B,MAAM,EAAE,MAAM;oBACd,KAAK,EAAE,KAAK;iBACZ,CAAC,CAAC;YACJ,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;gBAClC,MAAM;qBACJ,IAAI,CAAC,IAAI;oBACT,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE;wBAC/B,MAAM,EAAE,IAAI;wBACZ,KAAK,EAAE,IAAI;qBACX,CAAC,CAAC;gBACJ,CAAC,CAAC;qBACD,KAAK,CAAC,GAAG;oBACT,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE;wBAC/B,MAAM,EAAE,IAAI;wBACZ,KAAK,EAAE,GAAG;qBACV,CAAC,CAAC;gBACJ,CAAC,CAAC,CAAC;YACL,CAAC;QACF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,gBAAgB,EAAE,CAAC,KAAK,EAAE,GAAG;YAC7C,IAAI,MAAM,GAAG,IAAI,EAChB,KAAK,GAAG,IAAI,EACZ,UAAU,GAAG,GAAG,CAAC,MAAM,CAAC;YAEzB,IAAI,CAAC;gBACJ,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;oBACjB,yBAAyB;oBACzB,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;gBACjD,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBAC1C,yCAAyC;oBACzC,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;oBAC5C,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;gBACvD,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,MAAM,gBAAgB,CAAC;gBACxB,CAAC;YACF,CAAC;YACD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACX,KAAK,GAAG,EAAE,CAAC;YACZ,CAAC;YACD,KAAK,CAAC,WAAW,GAAG;gBACnB,MAAM,EAAE,MAAM;gBACd,KAAK,EAAE,KAAK;aACZ,CAAC;QACH,CAAC,CAAC,CAAC;IACJ,CAAC;CACD;AA/dD,0CA+dC","file":"ElectronAppBase.js","sourcesContent":["import * as eltr from 'electron';\r\nimport { EventEmitter } from 'events';\r\nimport * as fs from 'fs';\r\nimport * as http from 'http';\r\nimport * as path from 'path';\r\n\r\nimport * as execSyncToBuffer from 'sync-exec';\r\nimport { Guard } from 'back-lib-common-util';\r\nconst tinyCdn = require('tiny-cdn');\r\nimport * as winston from 'winston';\r\n\r\nimport { ElectronWindowBase } from './ElectronWindowBase';\r\n\r\n\r\n// If this is main process\r\nif (eltr.ipcMain) {\r\n\tObject.defineProperty(global, 'appRoot', {\r\n\t\tvalue: process.cwd(),\r\n\t\twritable: false // Add read-only property\r\n\t});\r\n}\r\n\r\n\r\nexport type ElectronAppLogLevel = 'debug' | 'info' | 'warn' | 'error';\r\n\r\nexport interface ElectronAppOptions {\r\n\r\n\t/**\r\n\t * Whether to close all windows when one windows is closed. All windows' closing events are triggered as normal.\r\n\t * This option is often used with `quitWhenAllWindowsClosed=true`.\r\n\t * Default is \"false\".\r\n\t */\r\n\tglobalClose?: boolean;\r\n\r\n\t/**\r\n\t * Path to the folder where log files are created.\r\n\t * Default is \"{appRoot}/logs\".\r\n\t */\r\n\tlogFilePath?: string;\r\n\r\n\t/**\r\n\t * Whether to server static files (css, jpg,...) via a embeded server.\r\n\t * Default is \"true\".\r\n\t */\r\n\tserveStaticFiles?: boolean;\r\n\r\n\t/**\r\n\t * Domain name for file server, if serveStaticFiles is enabled.\r\n\t * Default is \"localhost\".\r\n\t */\r\n\tstaticFileDomain?: string;\r\n\r\n\t/**\r\n\t * Port for file server, if serveStaticFiles is enabled.\r\n\t * Default is \"30000\".\r\n\t */\r\n\tstaticFilePort?: number;\r\n\r\n\t/**\r\n\t * Whether to quit application when all windows are closed.\r\n\t * Default is \"true\".\r\n\t */\r\n\tquitWhenAllWindowsClosed?: boolean;\r\n}\r\n\r\nexport abstract class ElectronAppBase {\r\n\r\n\tprotected readonly _windows: Map<string, Electron.BrowserWindow>;\r\n\tprotected readonly _event: EventEmitter;\r\n\tprotected readonly _quitHandlers: ((force: boolean) => Promise<boolean>)[];\r\n\tprotected _logger: winston.LoggerInstance;\r\n\tprotected _viewRoot: string;\r\n\r\n\tprivate readonly _core: Electron.App;\r\n\tprivate readonly _ipcMain: Electron.IpcMain;\r\n\tprivate _isClosingAll: boolean;\r\n\r\n\r\n\t/**\r\n\t * Gets absolute path to folder that contains html files.\r\n\t */\r\n\tpublic get viewRoot(): string {\r\n\t\treturn this._viewRoot;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets Electron application instance.\r\n\t */\r\n\tprotected get core(): Electron.App {\r\n\t\treturn this._core;\r\n\t}\r\n\r\n\t/** \r\n\t * Gets IPC of main process.\r\n\t*/\r\n\tprotected get ipcMain(): Electron.IpcMain {\r\n\t\treturn this._ipcMain;\r\n\t}\r\n\r\n\r\n\tconstructor(private _options: ElectronAppOptions = {}) {\r\n\t\tthis._core = eltr.app;\r\n\t\tthis._ipcMain = eltr.ipcMain;\r\n\t\tthis._windows = new Map<string, Electron.BrowserWindow>();\r\n\r\n\t\tthis._event = new EventEmitter();\r\n\t\tthis._quitHandlers = [];\r\n\t\tthis._isClosingAll = false;\r\n\t\tthis._viewRoot = `${global.appRoot}/views/`;\r\n\r\n\t\tlet defaultOpts: ElectronAppOptions = {\r\n\t\t\tglobalClose: false,\r\n\t\t\tlogFilePath: path.join(global.appRoot, 'logs'),\r\n\t\t\tquitWhenAllWindowsClosed: true,\r\n\t\t\tserveStaticFiles: true,\r\n\t\t\tstaticFileDomain: 'localhost',\r\n\t\t\tstaticFilePort: 30000\r\n\t\t};\r\n\t\t\r\n\t\tthis._options = Object.assign(defaultOpts, this._options);\r\n\t\tthis.initLogger();\r\n\r\n\t\tglobal.app = this;\r\n\t}\r\n\r\n\tpublic abstract isDebug(): boolean;\r\n\r\n\t/**\r\n\t * Starts application\r\n\t */\r\n\tpublic start(): void {\r\n\t\tthis.onStarting();\r\n\r\n\t\tthis.handleEvents();\r\n\r\n\t\tlet startPromise = new Promise<void>(resolve => {\r\n\t\t\t// Only use this when your VGA is blacklisted by Chrome. Check chrome://gpu to know.\r\n\t\t\tthis._core.commandLine.appendSwitch('ignore-gpu-blacklist', 'true');\r\n\t\t\tthis.startCommunication();\r\n\t\t\tresolve();\r\n\t\t});\r\n\r\n\t\tif (this._options.serveStaticFiles) {\r\n\t\t\tstartPromise = startPromise.then(() => this.serveStaticFiles());\r\n\t\t}\r\n\r\n\t\tthis._event.once('app-ready', () => {\r\n\t\t\tstartPromise.then(() => this.onStarted());\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Writes logging message.\r\n\t */\r\n\tpublic log(level: ElectronAppLogLevel, message: any): Promise<void> {\r\n\t\treturn new Promise<void>((resolve, reject) => {\r\n\t\t\tthis._logger.log(level, message, (error) => {\r\n\t\t\t\tif (error) {\r\n\t\t\t\t\treject(error);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tresolve();\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Attempts to quit this application, however one of the quit handlers can\r\n\t * prevent this process if `force` is false.\r\n\t * @param force Quit the app regardless somebody wants to prevent.\r\n\t * @return If quit process is successful or not.\r\n\t */\r\n\tpublic quit(force: boolean = false): Promise<boolean> {\r\n\t\tlet handlerPromises = this._quitHandlers.map(handler => handler(force));\r\n\t\t\r\n\t\treturn Promise.all(handlerPromises).then(results => {\r\n\t\t\t// If at least one of the results is \"false\", cancel quit process.\r\n\t\t\tlet cancel = results.reduce((prev, r) => r && prev, true);\r\n\t\t\t\r\n\t\t\t// If the app is forced to quit, or if nobody prevents it from quitting.\r\n\t\t\tif (force || !cancel) {\r\n\t\t\t\tthis._core.quit();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Stores this window reference and adds neccessary events to manage it.\r\n\t */\r\n\tpublic addWindow<T extends ElectronWindowBase>(window: T): T {\r\n\t\twindow.app = this;\r\n\t\tthis._windows.set(window.name, window);\r\n\r\n\t\twindow.webContents.on('did-start-loading', () => this.processEmbededServerUrl(window));\r\n\r\n\t\twindow.on('closed', () => {\r\n\t\t\tthis._windows.delete(window.name);\r\n\t\t\t\r\n\t\t\tif (!window.triggerGlobalClose) { return; }\r\n\t\t\tthis.tryCloseAllWindows();\r\n\t\t});\r\n\r\n\t\twindow.start();\r\n\t\treturn window;\r\n\t}\r\n\r\n\t/**\r\n\t * Reloads window with specified `name`, or reloads all if no name is given.\r\n\t * @param name If specified, reload window with this name.\r\n\t */\r\n\tpublic reload(name?: string): void {\r\n\t\tif (name && this._windows.has(name)) {\r\n\t\t\tthis._windows.get(name).reload();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._windows.forEach(win => win.reload());\r\n\t}\r\n\r\n\t/**\r\n\t * Enables full screen for window with specified `name`, or sets full screen for all if no name is given.\r\n\t * @param name If specified, reload window with this name.\r\n\t */\r\n\tpublic goFullScreen(name?: string): void {\r\n\t\tif (name && this._windows.has(name)) {\r\n\t\t\tthis._windows.get(name).setFullScreen(true);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._windows.forEach(win => win.setFullScreen(true));\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a listener to call before quit.\r\n\t * @param handler If this handler resolves to falsey value, it cancels quit process.\r\n\t */\r\n\tpublic addQuitListener(handler: (force: boolean) => Promise<boolean>): void {\r\n\t\tGuard.assertDefined('handler', handler);\r\n\t\tthis._quitHandlers.push(handler);\r\n\t}\r\n\r\n\t/**\r\n\t * Clears HTTP cache.\r\n\t */\r\n\tpublic clearCache(): Promise<void> {\r\n\t\treturn new Promise<void>((resolve) => {\r\n\t\t\teltr.session.defaultSession.clearCache(resolve);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Clears all types of storage, not including HTTP cache.\r\n\t */\r\n\tpublic clearStorage(): Promise<void> {\r\n\t\treturn new Promise<void>((resolve) => {\r\n\t\t\tlet options = {\r\n\t\t\t\tstorages: [\r\n\t\t\t\t\t'appcache',\r\n\t\t\t\t\t'cookies',\r\n\t\t\t\t\t'filesystem',\r\n\t\t\t\t\t'indexdb',\r\n\t\t\t\t\t'localstorage',\r\n\t\t\t\t\t'shadercache',\r\n\t\t\t\t\t'websql',\r\n\t\t\t\t\t'serviceworkers',\r\n\t\t\t\t],\r\n\t\t\t\tquotas: [\r\n\t\t\t\t\t'temporary',\r\n\t\t\t\t\t'persistent',\r\n\t\t\t\t\t'syncable',\r\n\t\t\t\t],\r\n\t\t\t\torigin: '*'\r\n\t\t\t};\r\n\r\n\t\t\teltr.session.defaultSession.clearStorageData(options, resolve);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Gets all display screens available on this machine.\r\n\t */\r\n\tpublic getAllDisplays(): Electron.Display[] {\r\n\t\treturn eltr.screen.getAllDisplays();\r\n\t}\r\n\r\n\t\r\n\t/**\r\n\t * Gets the 2nd display screen (if any) on this machine. \r\n\t * If you want to get more displays, use `getAllDisplays`.\r\n\t * @return A display object, or null if there is only one display available.\r\n\t */\r\n\tpublic getSecondDisplay(): Electron.Display {\r\n\t\tlet displays = this.getAllDisplays(),\r\n\t\t\texternalDisplay = null;\r\n\r\n\t\tfor (let i in displays) {\r\n\t\t\tif (displays[i].bounds.x != 0 || displays[i].bounds.y != 0) {\r\n\t\t\texternalDisplay = displays[i];\r\n\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn externalDisplay;\r\n\t}\r\n\r\n\t/**\r\n\t * Executes an OS command.\r\n\t */\r\n\tprotected execCmd(command: string, options?): string {\r\n\t\toptions = options || {};\r\n\r\n\t\tlet results = execSyncToBuffer(command, options);\r\n\r\n\t\tif (!results.status) {\r\n\t\t\treturn results.stdout;\r\n\t\t}\r\n\r\n\t\tthrow {\r\n\t\t\tstderr: results.stderr\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Occurs after application window is focused by user.\r\n\t */\r\n\tprotected onActivated(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Occurs after all windows have been closed.\r\n\t */\r\n\tprotected onAllWindowsClosed(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Occurs before application creates any windows.\r\n\t */\r\n\tprotected onStarting(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Occurs after application has created all windows.\r\n\t */\r\n\tprotected onStarted(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a listener to call when an error occurs.\r\n\t */\r\n\tprotected onError(message: string): void {\r\n\t\tthis.log('error', message);\r\n\t}\r\n\r\n\r\n\tprivate tryCloseAllWindows(): void {\r\n\t\tif (!this._options.globalClose || this._isClosingAll) { return; }\r\n\r\n\t\t// Turn on flag to prevent this method from being called multiple times by other window's 'closed' event.\r\n\t\tthis._isClosingAll = true;\r\n\t\t\r\n\t\tthis._windows.forEach((win: ElectronWindowBase) => {\r\n\t\t\twin.close();\r\n\t\t\tthis._windows.delete(win.name);\r\n\t\t});\r\n\t}\r\n\r\n\tprivate handleEvents(): void {\r\n\t\tlet app = this._core;\r\n\t\t\r\n\t\t// This method will be called when Electron has finished\r\n\t\t// initialization and is ready to create browser windows.\r\n\t\t// Some APIs can only be used after this event occurs.\r\n\t\tapp.on('ready', () => {\r\n\t\t\tthis._event.emit('app-ready');\r\n\t\t});\r\n\r\n\t\t// Quit when all windows are closed.\r\n\t\tapp.on('window-all-closed', () => {\r\n\t\t\tthis.onAllWindowsClosed();\r\n\t\t\tif (this._options.quitWhenAllWindowsClosed) {\r\n\t\t\t\tthis._core.quit();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tapp.on('activate', () => {\r\n\t\t\tthis.onActivated();\r\n\t\t});\r\n\t}\r\n\r\n\tprivate initLogger(): void {\r\n\t\tlet logPath = this._options.logFilePath;\r\n\t\t\r\n\t\tif (!fs.existsSync(logPath)) {\r\n\t\t\tfs.mkdirSync(logPath);\r\n\t\t}\r\n\r\n\t\tthis._logger = new winston.Logger({\r\n\t\t\ttransports: [\r\n\t\t\t\tnew (winston.transports.Console)({\r\n\t\t\t\t\tlevel: 'silly'\r\n\t\t\t\t}),\r\n\t\t\t\tnew (winston.transports.File)({\r\n\t\t\t\t\tfilename: path.join(logPath, 'error.txt'),\r\n\t\t\t\t\tlevel: 'warn'\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n\r\n\tprivate processEmbededServerUrl(win: Electron.BrowserWindow): void {\r\n\t\t/**\r\n\t\t * Transform resource file URLs\r\n\t\t */\r\n\t\tconst filter = {\r\n\t\t\turls: []\r\n\t\t};\r\n\t\twin.webContents.session.webRequest.onBeforeRequest(filter, (detail: Electron.OnBeforeRequestDetails, cb: (response: Electron.Response) => void) => {\r\n\t\t\t//*\r\n\t\t\tconst ROOT_PATH = '~/';\r\n\t\t\tlet { url } = detail,\r\n\t\t\t\tpos = url.indexOf(ROOT_PATH),\r\n\t\t\t\tredirectURL = null;\r\n\r\n\t\t\tif (pos >= 0) {\r\n\t\t\t\turl = url.substring(pos + ROOT_PATH.length);\r\n\t\t\t\t// Map from \"~/\" to \"localhost/\"\"\r\n\t\t\t\tredirectURL = `${global.webRoot}/${url}`;\r\n\t\t\t}\r\n\t\t\t//*/\r\n\t\t\t// this.log('debug', 'Old URL: ' + url);\r\n\t\t\t// this.log('debug', 'New URL: ' + redirectURL);\r\n\r\n\t\t\tcb({ redirectURL });\r\n\t\t});\r\n\t}\r\n\r\n\tprivate serveStaticFiles(): Promise<void> {\r\n\t\tconst CACHE_PATH = `${global.appRoot}/assets/tiny-cdn-cache`;\r\n\t\tlet domain = this._options.staticFileDomain || 'localhost',\r\n\t\t\tport = this._options.staticFilePort || 30000;\r\n\t\t\r\n\t\tif (!fs.existsSync(CACHE_PATH)) {\r\n\t\t\tfs.mkdirSync(CACHE_PATH);\r\n\t\t}\r\n\r\n\t\treturn new Promise<void>(resolve => {\r\n\t\t\thttp.createServer(tinyCdn.create({\r\n\t\t\t\tsource: global.appRoot,\r\n\t\t\t\tdest: CACHE_PATH,\r\n\t\t\t}))\r\n\t\t\t.listen(port, () => {\r\n\t\t\t\t// Add read-only property\r\n\t\t\t\tObject.defineProperty(global, 'webRoot', {\r\n\t\t\t\t\tvalue: `http://${domain}:${port}`,\r\n\t\t\t\t\twritable: false\r\n\t\t\t\t});\r\n\r\n\t\t\t\tresolve();\r\n\t\t\t})\r\n\t\t\t.on('error', (err) => this._event.emit('error', err));\r\n\t\t})\r\n\t\t.catch(err => {\r\n\t\t\tthis._event.emit('error', err);\r\n\t\t\tprocess.exit();\r\n\t\t});\r\n\t}\r\n\r\n\tprivate startCommunication(): void {\r\n\t\t// Allow renderer process to call a function in main process\r\n\t\t// arg = {\r\n\t\t// \t\tfunc: 'function name',\r\n\t\t//\t\tparams: ['array', 'of', 'parameters'],\r\n\t\t//\t\tresponse: 'response channel'\r\n\t\t// }\r\n\t\tthis._ipcMain.on('async-func-call', (event, arg) => {\r\n\t\t\tlet result = null,\r\n\t\t\t\terror = null,\r\n\t\t\t\twindowName = arg.target;\r\n\r\n\t\t\ttry {\r\n\t\t\t\t// result = this[arg.func].apply(this, arg.params);\r\n\t\t\t\tif (!windowName) {\r\n\t\t\t\t\t// Call app class' method\r\n\t\t\t\t\tresult = this[arg.func].apply(this, arg.params);\r\n\t\t\t\t} else if (this._windows.has(windowName)) {\r\n\t\t\t\t\t// Call method from this specified window\r\n\t\t\t\t\tlet context = this._windows.get(windowName);\r\n\t\t\t\t\tresult = context[arg.func].apply(context, arg.params);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow 'Invalid target';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (ex) {\r\n\t\t\t\terror = ex;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!result || (result && !result.then) ) {\r\n\t\t\t\tevent.sender.send(arg.response, {\r\n\t\t\t\t\tresult: result,\r\n\t\t\t\t\terror: error\r\n\t\t\t\t});\r\n\t\t\t} else if (result && result.then) {\r\n\t\t\t\tresult\r\n\t\t\t\t\t.then(data => {\r\n\t\t\t\t\t\tevent.sender.send(arg.response, {\r\n\t\t\t\t\t\t\tresult: data,\r\n\t\t\t\t\t\t\terror: null\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch(err => {\r\n\t\t\t\t\t\tevent.sender.send(arg.response, {\r\n\t\t\t\t\t\t\tresult: null,\r\n\t\t\t\t\t\t\terror: err\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis._ipcMain.on('sync-func-call', (event, arg) => {\r\n\t\t\tlet result = null,\r\n\t\t\t\terror = null,\r\n\t\t\t\twindowName = arg.target;\r\n\r\n\t\t\ttry {\r\n\t\t\t\tif (!windowName) {\r\n\t\t\t\t\t// Call app class' method\r\n\t\t\t\t\tresult = this[arg.func].apply(this, arg.params);\r\n\t\t\t\t} else if (this._windows.has(windowName)) {\r\n\t\t\t\t\t// Call method from this specified window\r\n\t\t\t\t\tlet context = this._windows.get(windowName);\r\n\t\t\t\t\tresult = context[arg.func].apply(context, arg.params);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow 'Invalid target';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (ex) {\r\n\t\t\t\terror = ex;\r\n\t\t\t}\r\n\t\t\tevent.returnValue = {\r\n\t\t\t\tresult: result,\r\n\t\t\t\terror: error\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n}"]}