{"version":3,"sources":["ElectronUtil.ts"],"names":[],"mappings":";;AAAA,uCAAuC;AAGvC,MAAM,SAAS,GAAG,qDAAqD,CAAC;AAExE;;;GAGG;AACH,IAAI,QAAQ,GAAG,UAAS,UAAkB,EAAE,IAAc;IACzD,MAAM,CAAC;QACN,IAAI,kBAAkB,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,EAChE,IAAI,GAAG,CAAC,UAAU,EAAE,GAAG,kBAAkB,CAAC,CAAC;QAC5C,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC;AACH,CAAC,CAAC;AAEF;IAEC;;;OAGG;IACI,MAAM,CAAC,uBAAuB,CAAC,UAAkB;QACvD,MAAM,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC,UAAU,EAAE,YAAY,CAAC,QAAQ,CAAC,CAAC;QACjE,MAAM,CAAC,cAAc,CAAC,GAAG,QAAQ,CAAC,UAAU,EAAE,YAAY,CAAC,YAAY,CAAC,CAAC;IAC1E,CAAC;IAED;;;;;;OAMG;IACI,MAAM,CAAC,QAAQ,CAAC,UAAkB,EAAE,IAAY,EAAE,QAAQ,EAAE,GAAG,MAAM;QAC3E,EAAE,CAAC,CAAC,CAAC,sBAAW,CAAC,CAAC,CAAC;YAClB,MAAM,SAAS,CAAC;QACjB,CAAC;QAED,IAAI,eAAe,GAAG,IAAI,GAAG,WAAW,CAAC;QAEzC,sBAAW,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,KAAK,EAAE,GAAG;YAC5C,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAAC,MAAM,CAAC;YAAC,CAAC;YAC1B,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,sBAAW,CAAC,IAAI,CAAC,iBAAiB,EAAE;YACnC,IAAI,EAAE,IAAI;YACV,MAAM,EAAE,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;YAChD,QAAQ,EAAE,eAAe;YACzB,MAAM,EAAE,UAAU;SAClB,CAAC,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,YAAY,CAAC,UAAkB,EAAE,IAAY,EAAE,GAAG,MAAM;QACrE,EAAE,CAAC,CAAC,CAAC,sBAAW,CAAC,CAAC,CAAC;YAClB,MAAM,SAAS,CAAC;QACjB,CAAC;QACD,MAAM,CAAM,sBAAW,CAAC,QAAQ,CAAC,gBAAgB,EAAE;YAClD,IAAI,EAAE,IAAI;YACV,MAAM,EAAE,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;YAChD,MAAM,EAAE,UAAU;SAClB,CAAC,CAAC;IACJ,CAAC;CACD;AAtDD,oCAsDC","file":"ElectronUtil.js","sourcesContent":["import { ipcRenderer } from 'electron';\r\n\r\n\r\nconst ERROR_MSG = 'This function is only available on renderer process';\r\n\r\n/**\r\n * Returns a function that always as `windowName` passed as first param,\r\n * other params are the same as `func`.\r\n */\r\nlet delegate = function(windowName: string, func: Function): any {\r\n\treturn function() {\r\n\t\tlet argsWithoutWinName = Array.prototype.slice.call(arguments, 1),\r\n\t\t\targs = [windowName, ...argsWithoutWinName];\r\n\t\tfunc.apply(null, args);\r\n\t};\r\n};\r\n\r\nexport class ElectronUtil {\r\n\r\n\t/**\r\n\t * Assigns functions in this class to `global` variable.\r\n\t * @param windowName The window name to call functions from.\r\n\t */\r\n\tpublic static registerGlobalFunctions(windowName: string) {\r\n\t\tglobal['callMain'] = delegate(windowName, ElectronUtil.callMain);\r\n\t\tglobal['callMainSync'] = delegate(windowName, ElectronUtil.callMainSync);\r\n\t}\r\n\r\n\t/**\r\n\t * Calls a function from main process asynchronously\r\n\t * @param windowName The window name to call functions from. If null, call function in app class.\r\n\t * @param func Function name.\r\n\t * @param callback A function that accepts (error, result) as arguments.\r\n\t * @param params List of parameters to send to the function.\r\n\t */\r\n\tpublic static callMain(windowName: string, func: string, callback, ...params): void {\r\n\t\tif (!ipcRenderer) {\r\n\t\t\tthrow ERROR_MSG;\r\n\t\t}\r\n\r\n\t\tlet responseChannel = func + '-response';\r\n\t\t\r\n\t\tipcRenderer.once(responseChannel, (event, arg) => {\r\n\t\t\tif (!callback) { return; }\r\n\t\t\tcallback(arg.error, arg.result);\r\n\t\t});\r\n\t\t\r\n\t\tipcRenderer.send('async-func-call', {\r\n\t\t\tfunc: func,\r\n\t\t\tparams: Array.prototype.slice.call(arguments, 3),\r\n\t\t\tresponse: responseChannel,\r\n\t\t\ttarget: windowName\r\n\t\t});\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * Calls a function from main process and waits for it to complete.\r\n\t * @param windowName The window name to call functions from. If null, call function in app class.\r\n\t * @param func Function name.\r\n\t * @param params List of parameters to send to the function.\r\n\t */\r\n\tpublic static callMainSync(windowName: string, func: string, ...params): { result, error } {\r\n\t\tif (!ipcRenderer) {\r\n\t\t\tthrow ERROR_MSG;\r\n\t\t}\r\n\t\treturn <any>ipcRenderer.sendSync('sync-func-call', {\r\n\t\t\tfunc: func,\r\n\t\t\tparams: Array.prototype.slice.call(arguments, 2),\r\n\t\t\ttarget: windowName\r\n\t\t});\r\n\t}\r\n}"]}