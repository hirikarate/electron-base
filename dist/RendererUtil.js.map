{"version":3,"sources":["RendererUtil.ts"],"names":[],"mappings":"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","file":"RendererUtil.js","sourcesContent":["import { ipcRenderer, remote } from 'electron';\r\n\r\nimport { ElectronAppBase } from './ElectronAppBase';\r\nimport { ElectronWindowBase } from './ElectronWindowBase';\r\n\r\n\r\nconst NOT_AVAIL_ERROR = 'This function is only available on renderer process!',\r\n\tNOT_PROMISE_ERROR = 'This function does not return a Promise!';\r\n\r\nexport const parentWindow = (ipcRenderer != null \r\n\t? <ElectronWindowBase>remote.getCurrentWindow() \r\n\t: null);\r\n\r\nexport const mainApp = (ipcRenderer != null \r\n\t? <ElectronAppBase>remote.getGlobal('app') \r\n\t: null);\r\n\r\n\r\nlet addGlobal = function (name, value) {\r\n\tif (global[name] !== undefined) { return; }\r\n\r\n\tObject.defineProperty(global, name, {\r\n\t\tvalue: value,\r\n\t\twritable: false // Add read-only property\r\n\t});\r\n};\r\n\r\nexport class RendererUtil {\r\n\r\n\t/**\r\n\t * Copies global vars from main process to renderer process.\r\n\t */\r\n\tpublic static shareGlobalVars() {\r\n\t\tif (!ipcRenderer) {\r\n\t\t\tthrow NOT_AVAIL_ERROR;\r\n\t\t}\r\n\t\taddGlobal('appRoot', remote.getGlobal('appRoot'));\r\n\t\taddGlobal('webRoot', remote.getGlobal('webRoot'));\r\n\t\taddGlobal('windowName', parentWindow.name);\r\n\t}\r\n\r\n\t/**\r\n\t * Calls a method from app class asynchronously, it will run on main process.\r\n\t * Unlike `callIpc`, this method can send and receive all types of JS objects.\r\n\t * @param func Function name.\r\n\t * @param params List of parameters to send to the remote method.\r\n\t */\r\n\tpublic static callRemoteMain(func: string, ...params): Promise<any> {\r\n\t\tif (!ipcRenderer) {\r\n\t\t\tthrow NOT_AVAIL_ERROR;\r\n\t\t}\r\n\t\tlet result = mainApp[func].apply(mainApp, params);\r\n\t\t\r\n\t\tif (!(result instanceof Promise)) {\r\n\t\t\tthrow NOT_PROMISE_ERROR;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Calls a method from app class and waits for it to complete, it will run on main process.\r\n\t * Unlike `callIpcSync`, this method can send and receive all types of JS objects.\r\n\t * @param func Function name.\r\n\t * @param params List of parameters to send to the remote method.\r\n\t */\r\n\tpublic static callRemoteMainSync(func: string, ...params): any {\r\n\t\tif (!ipcRenderer) {\r\n\t\t\tthrow NOT_AVAIL_ERROR;\r\n\t\t}\r\n\t\treturn mainApp[func].apply(mainApp, params);\r\n\t}\r\n\r\n\t/**\r\n\t * Calls a method from parent window asynchronously, it will run on main process.\r\n\t * Unlike `callIpc`, this method can send and receive all types of JS objects.\r\n\t * @param func Function name.\r\n\t * @param params List of parameters to send to the remote method.\r\n\t */\r\n\tpublic static callRemoteWindow(func: string, ...params): Promise<any> {\r\n\t\tif (!ipcRenderer) {\r\n\t\t\tthrow NOT_AVAIL_ERROR;\r\n\t\t}\r\n\t\tlet result = parentWindow[func].apply(parentWindow, params);\r\n\r\n\t\tif (!(result instanceof Promise)) {\r\n\t\t\tthrow NOT_PROMISE_ERROR;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Calls a method from parent window and waits for it to complete, it will run on main process.\r\n\t * Unlike `callIpc`, this method can send and receive all types of JS objects.\r\n\t * @param func Function name.\r\n\t * @param params List of parameters to send to the remote method.\r\n\t */\r\n\tpublic static callRemoteWindowSync(func: string, ...params): any {\r\n\t\tif (!ipcRenderer) {\r\n\t\t\tthrow NOT_AVAIL_ERROR;\r\n\t\t}\r\n\r\n\t\treturn parentWindow[func].apply(parentWindow, params);\r\n\t}\r\n\r\n\t/**\r\n\t * Calls a function from main process asynchronously with inter-process message.\r\n\t * Can only send and receive serialziable JSON objects.\r\n\t * @param windowName The window name to call functions from. If null, call function in app class.\r\n\t * @param func Function name.\r\n\t * @param params List of parameters to send to the function.\r\n\t */\r\n\tpublic static callIpc(windowName: string, func: string, ...params): Promise<any> {\r\n\t\tif (!ipcRenderer) {\r\n\t\t\tthrow NOT_AVAIL_ERROR;\r\n\t\t}\r\n\r\n\t\treturn new Promise<any>((resolve, reject) => {\r\n\t\t\tlet responseChannel = func + '-response';\r\n\t\t\t\r\n\t\t\tipcRenderer.once(responseChannel, (event, arg) => {\r\n\t\t\t\tif (!arg.error) {\r\n\t\t\t\t\treject(arg.error);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tresolve(arg.result);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tipcRenderer.send('async-func-call', {\r\n\t\t\t\tfunc: func,\r\n\t\t\t\tparams: Array.prototype.slice.call(arguments, 3),\r\n\t\t\t\tresponse: responseChannel,\r\n\t\t\t\ttarget: windowName\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Calls a function from main process and waits for it to complete.\r\n\t * Can only send and receive serialziable JSON objects.\r\n\t * @param windowName The window name to call functions from. If null, call function in app class.\r\n\t * @param func Function name.\r\n\t * @param params List of parameters to send to the function.\r\n\t */\r\n\tpublic static callIpcSync(windowName: string, func: string, ...params): { result, error } {\r\n\t\tif (!ipcRenderer) {\r\n\t\t\tthrow NOT_AVAIL_ERROR;\r\n\t\t}\r\n\t\treturn <any>ipcRenderer.sendSync('sync-func-call', {\r\n\t\t\tfunc: func,\r\n\t\t\tparams: Array.prototype.slice.call(arguments, 2),\r\n\t\t\ttarget: windowName\r\n\t\t});\r\n\t}\r\n}"]}