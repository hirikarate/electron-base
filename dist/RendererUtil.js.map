{"version":3,"sources":["RendererUtil.ts"],"names":[],"mappings":"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","file":"RendererUtil.js","sourcesContent":["import { ipcRenderer, remote } from 'electron';\r\n\r\nimport { ElectronAppBase } from './ElectronAppBase';\r\nimport { ElectronWindowBase } from './ElectronWindowBase';\r\nimport { MainLogger } from './MainLogger';\r\nimport { RendererLogger } from './RendererLogger';\r\n\r\n\r\nconst NOT_AVAIL_ERROR = 'This function is only available on renderer process!',\r\n\tNOT_PROMISE_ERROR = 'This function does not return a Promise!';\r\n\r\n\r\nexport class RendererUtil {\r\n\r\n\tprivate _mainLogger: MainLogger;\r\n\tprivate _rendererLogger: RendererLogger;\r\n\tprivate _mainApp: ElectronAppBase;\r\n\tprivate _parentWindow: ElectronWindowBase;\r\n\r\n\r\n\tconstructor() {\r\n\t\tif (!ipcRenderer) {\r\n\t\t\tthrow NOT_AVAIL_ERROR;\r\n\t\t}\r\n\r\n\t\tthis._mainApp = (ipcRenderer != null \r\n\t\t\t? <ElectronAppBase>remote.getGlobal('app') \r\n\t\t\t: null);\r\n\r\n\t\tthis._parentWindow = (ipcRenderer != null && this._mainApp != null\r\n\t\t\t? this._mainApp.findWindow(remote.getCurrentWindow()['name'])\r\n\t\t\t: null);\r\n\r\n\t\tthis._rendererLogger = new RendererLogger(this._mainApp.logger);\r\n\t}\r\n\r\n\r\n\tpublic get logger(): RendererLogger {\r\n\t\treturn this._rendererLogger;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets instance of main app class.\r\n\t */\r\n\tpublic get mainApp(): ElectronAppBase {\r\n\t\treturn this._mainApp;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets instance of parent window of this renderer process.\r\n\t */\r\n\tpublic get parentWindow(): ElectronWindowBase {\r\n\t\treturn this._parentWindow;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Calls a method from app class asynchronously, it will run on main process.\r\n\t * Unlike `callIpc`, this method can send and receive all types of JS objects.\r\n\t * @param func Function name.\r\n\t * @param params List of parameters to send to the remote method.\r\n\t */\r\n\tpublic callRemoteMain(func: string, ...params): Promise<any> {\r\n\t\tlet mainApp = this._mainApp,\r\n\t\t\tresult = mainApp[func].apply(mainApp, params);\r\n\t\t\r\n\t\tif (!(result instanceof Promise)) {\r\n\t\t\tthrow NOT_PROMISE_ERROR;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Calls a method from app class and waits for it to complete, it will run on main process.\r\n\t * Unlike `callIpcSync`, this method can send and receive all types of JS objects.\r\n\t * @param func Function name.\r\n\t * @param params List of parameters to send to the remote method.\r\n\t */\r\n\tpublic callRemoteMainSync(func: string, ...params): any {\r\n\t\tlet mainApp = this._mainApp;\r\n\t\treturn mainApp[func].apply(mainApp, params);\r\n\t}\r\n\r\n\t/**\r\n\t * Calls a method from parent window asynchronously, it will run on main process.\r\n\t * Unlike `callIpc`, this method can send and receive all types of JS objects.\r\n\t * @param func Function name.\r\n\t * @param params List of parameters to send to the remote method.\r\n\t */\r\n\tpublic callRemoteWindow(func: string, ...params): Promise<any> {\r\n\t\tlet parentWindow = this._parentWindow,\r\n\t\t\tresult = parentWindow[func].apply(parentWindow, params);\r\n\r\n\t\tif (!(result instanceof Promise)) {\r\n\t\t\tthrow NOT_PROMISE_ERROR;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Calls a method from parent window and waits for it to complete, it will run on main process.\r\n\t * Unlike `callIpc`, this method can send and receive all types of JS objects.\r\n\t * @param func Function name.\r\n\t * @param params List of parameters to send to the remote method.\r\n\t */\r\n\tpublic callRemoteWindowSync(func: string, ...params): any {\r\n\t\tlet parentWindow = this._parentWindow;\r\n\t\treturn parentWindow[func].apply(parentWindow, params);\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * Calls a function from main process asynchronously with inter-process message.\r\n\t * Can only send and receive serialziable JSON objects.\r\n\t * @param windowName The window name to call functions from. If null, call function in app class.\r\n\t * @param func Function name.\r\n\t * @param params List of parameters to send to the function.\r\n\t */\r\n\tpublic callIpc(windowName: string, func: string, ...params): Promise<any> {\r\n\t\treturn new Promise<any>((resolve, reject) => {\r\n\t\t\tlet responseChannel = func + '-response';\r\n\t\t\t\r\n\t\t\tipcRenderer.once(responseChannel, (event, arg) => {\r\n\t\t\t\tif (!arg.error) {\r\n\t\t\t\t\treject(arg.error);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tresolve(arg.result);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tipcRenderer.send('async-func-call', {\r\n\t\t\t\tfunc: func,\r\n\t\t\t\tparams: Array.prototype.slice.call(arguments, 3),\r\n\t\t\t\tresponse: responseChannel,\r\n\t\t\t\ttarget: windowName\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * Calls a function from main process and waits for it to complete.\r\n\t * Can only send and receive serialziable JSON objects.\r\n\t * @param windowName The window name to call functions from. If null, call function in app class.\r\n\t * @param func Function name.\r\n\t * @param params List of parameters to send to the function.\r\n\t */\r\n\tpublic callIpcSync(windowName: string, func: string, ...params): { result, error } {\r\n\t\treturn <any>ipcRenderer.sendSync('sync-func-call', {\r\n\t\t\tfunc: func,\r\n\t\t\tparams: Array.prototype.slice.call(arguments, 2),\r\n\t\t\ttarget: windowName\r\n\t\t});\r\n\t}\r\n\r\n\t\r\n\tprivate addGlobal(name, value) {\r\n\t\tif (global[name] !== undefined) { return; }\r\n\r\n\t\tObject.defineProperty(global, name, {\r\n\t\t\tvalue: value,\r\n\t\t\twritable: false // Add read-only property\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies global vars from main process to renderer process.\r\n\t */\r\n\tprivate shareGlobalVars() {\r\n\t\tthis.addGlobal('appRoot', remote.getGlobal('appRoot'));\r\n\t\tthis.addGlobal('webRoot', remote.getGlobal('webRoot'));\r\n\t\tthis.addGlobal('packMode', this._mainApp.options.packMode);\r\n\t\tthis.addGlobal('windowName', this._parentWindow.name);\r\n\t\treturn this;\r\n\t}\r\n\r\n}\r\n\r\n// Only export an instance if called on renderer process.\r\nexport const rendererUtil = (ipcRenderer != null\r\n\t? new RendererUtil()['shareGlobalVars']() // Intentionally call private method\r\n\t: null);\r\n"]}