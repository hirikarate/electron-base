{"version":3,"sources":["ElectronWindowBase.ts"],"names":[],"mappings":"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","file":"ElectronWindowBase.js","sourcesContent":["import * as eltr from 'electron';\r\nimport { EventEmitter } from 'events';\r\nimport * as path from 'path';\r\n\r\nimport { Guard } from 'back-lib-common-util';\r\n\r\nimport { ElectronAppBase } from './ElectronAppBase';\r\n\r\nexport interface BrowserWindowConstructorOptions\r\n\textends Electron.BrowserWindowConstructorOptions {\r\n\t\r\n\t/**\r\n\t * Whether to trigger global close action.\r\n\t * Only takes effect when `ElectronAppOptions.globalClose=true`.\r\n\t * Default is \"false\".\r\n\t */\r\n\ttriggerGlobalClose?: boolean;\r\n}\r\n\r\n\r\nexport const BrowserWindow: typeof Electron.BrowserWindow = (eltr.ipcMain) ? eltr.BrowserWindow : null;\r\n\r\n/**\r\n * Use this base class instead of `new BrowserWindow()`.\r\n * Note: Always call `super.on...()` when overriding \r\n * event methods such as `onContentLoading`, `onClosing` etc.\r\n */\r\nexport abstract class ElectronWindowBase\r\n\textends BrowserWindow {\r\n\r\n\tprivate _app: ElectronAppBase;\r\n\tprivate _triggerGlobalClose: boolean;\r\n\r\n\t/**\r\n\t * Gets this window's name.\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this._name;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets parent app of this window.\r\n\t */\r\n\tpublic get app(): ElectronAppBase {\r\n\t\treturn this._app;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets parent app of this window.\r\n\t */\r\n\tpublic set app(app: ElectronAppBase) {\r\n\t\tthis._app = app;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets option \"triggerGlobalClose\" value.\r\n\t */\r\n\tpublic get triggerGlobalClose(): boolean {\r\n\t\treturn this._triggerGlobalClose;\r\n\t}\r\n\r\n\t/**\r\n\t * @param _name Name of this window\r\n\t */\r\n\tconstructor(\r\n\t\tprotected readonly _name: string,\r\n\t\toptions?: BrowserWindowConstructorOptions\r\n\t) {\r\n\t\tsuper(options);\r\n\t\tthis._triggerGlobalClose = (options.triggerGlobalClose == null ? true : false);\r\n\r\n\t\tthis.handleEvents();\r\n\t}\r\n\r\n\t/**\r\n\t * Do not call this method explicitly. It should be called in ElectronAppBase.addWindow\r\n\t */\r\n\tpublic abstract start(): void;\r\n\r\n\t/**\r\n\t * Clears HTTP cache.\r\n\t */\r\n\tpublic clearCache(): Promise<void> {\r\n\t\treturn new Promise<void>((resolve) => {\r\n\t\t\tthis.webContents.session.clearCache(resolve);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Clears all types of storage, including HTTP cache.\r\n\t */\r\n\tpublic clearStorage(): Promise<void> {\r\n\t\treturn new Promise<void>((resolve) => {\r\n\t\t\tlet options = {\r\n\t\t\t\tstorages: [\r\n\t\t\t\t\t'appcache',\r\n\t\t\t\t\t'cookies',\r\n\t\t\t\t\t'filesystem',\r\n\t\t\t\t\t'indexdb',\r\n\t\t\t\t\t'localstorage',\r\n\t\t\t\t\t'shadercache',\r\n\t\t\t\t\t'websql',\r\n\t\t\t\t\t'serviceworkers',\r\n\t\t\t\t],\r\n\t\t\t\tquotas: [\r\n\t\t\t\t\t'temporary',\r\n\t\t\t\t\t'persistent',\r\n\t\t\t\t\t'syncable',\r\n\t\t\t\t],\r\n\t\t\t\torigin: '*'\r\n\t\t\t};\r\n\r\n\t\t\teltr.session.defaultSession.clearStorageData(options, resolve);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Builds and gets absolute path from specified file path.\r\n\t * @param filePath Relative path to .html file.\r\n\t */\r\n\tprotected getView(filePath: string): string {\r\n\t\treturn path.join(this._app.viewRoot, filePath);\r\n\t}\r\n\r\n\t/**\r\n\t * Loads view from specified file path.\r\n\t * @param filePath Relative path to .html file.\r\n\t */\r\n\tprotected loadView(filePath: string, options?: Electron.LoadURLOptions): void {\r\n\t\tlet resource = 'file://' + this.getView(filePath);\r\n\t\tthis.loadURL(resource);\r\n\t}\r\n\r\n\t/**\r\n\t * Occurs when the window is going to be closed.\r\n\t * Itâ€™s emitted before the beforeunload and unload event of the DOM.\r\n\t * Calling event.preventDefault() will cancel the close.\r\n\t */\r\n\tprotected onClosing(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Occurs after the window has been closed. \r\n\t * After you have received this event you should remove \r\n\t * the reference to the window and avoid using it any more.\r\n\t */\r\n\tprotected onClosed(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Occurs when the window loses focus.\r\n\t */\r\n\tprotected onBlur(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Occurs when the window gains focus.\r\n\t */\r\n\tprotected onFocus(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Occurs when the web page has been rendered \r\n\t * (while not being shown) and window can be displayed without a visual flash.\r\n\t */\r\n\tprotected onShowing(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Occurs after the window has been shown.\r\n\t */\r\n\tprotected onShown(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Occurs when the spinner of the tab started spinning.\r\n\t */\r\n\tprotected onContentLoading(): void {\r\n\t\tthis.webContents.executeJavaScript(`\r\n\t\t\tif (global) {\r\n\t\t\t\tglobal.windowName = '${this.name}';\r\n\t\t\t\tglobal.appRoot = '${global.appRoot}';\r\n\t\t\t\tglobal.webRoot = '${global.webRoot}';\r\n\t\t\t}\r\n\t\t`);\r\n\t}\r\n\r\n\t/**\r\n\t * Occurs when the navigation is done, i.e. the spinner of the tab has stopped\r\n     * spinning, and the onload event was dispatched.\r\n\t */\r\n\tprotected onContentLoaded(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Occurs when the document in the given frame is loaded.\r\n\t */\r\n\tprotected onContentDomReady(event: Electron.Event) {\r\n\t}\r\n\r\n\r\n\tprivate handleEvents(): void {\r\n\t\t// Don't pass in a function like this: `this.on('close', this.onClosing.bind(this));`\r\n\t\t// Because `onClosing` can be overriden by children class.\r\n\r\n\t\tthis.on('close', () => this.onClosing());\r\n\t\tthis.on('closed', () => this.onClosed());\r\n\t\tthis.on('blur', () => this.onBlur());\r\n\t\tthis.on('focus', () => this.onFocus());\r\n\t\tthis.on('ready-to-show', () => this.onShowing());\r\n\t\tthis.on('show', () => this.onShown());\r\n\t\tthis.webContents.on('did-start-loading', () => this.onContentLoading());\r\n\t\tthis.webContents.on('did-finish-load', () => this.onContentLoaded());\r\n\t\tthis.webContents.on('dom-ready', (event: Electron.Event) => this.onContentDomReady(event));\r\n\t}\r\n}"]}