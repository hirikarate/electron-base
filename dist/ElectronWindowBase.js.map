{"version":3,"sources":["ElectronWindowBase.ts"],"names":[],"mappings":"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","file":"ElectronWindowBase.js","sourcesContent":["import * as eltr from 'electron';\r\nimport * as path from 'path';\r\n\r\nimport { ElectronAppBase } from './ElectronAppBase';\r\n\r\n\r\nexport interface BrowserWindowConstructorOptions\r\n\textends Electron.BrowserWindowConstructorOptions {\r\n\t\r\n\t/**\r\n\t * Whether to trigger global close action.\r\n\t * Only takes effect when `ElectronAppOptions.globalClose=true`.\r\n\t * Default is \"false\".\r\n\t */\r\n\ttriggerGlobalClose?: boolean;\r\n}\r\n\r\n\r\n// export const BrowserWindow: typeof Electron.BrowserWindow = (eltr.ipcMain) ? eltr.BrowserWindow : null;\r\n\r\n/**\r\n * Use this base class instead of `new BrowserWindow()`.\r\n * Note: Always call `super.on...()` when overriding \r\n * event methods such as `onContentLoading`, `onClosing` etc.\r\n */\r\nexport abstract class ElectronWindowBase {\r\n\r\n\tprivate _app: ElectronAppBase;\r\n\tprivate _internalWin: Electron.BrowserWindow;\r\n\tprivate _triggerGlobalClose: boolean;\r\n\r\n\t/**\r\n\t * Gets this window's name.\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this._name;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets parent app of this window.\r\n\t */\r\n\tpublic get app(): ElectronAppBase {\r\n\t\treturn this._app;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets parent app of this window.\r\n\t */\r\n\tpublic set app(app: ElectronAppBase) {\r\n\t\tthis._app = app;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets Electron native browser window.\r\n\t * This is a workaround until this issue is fixed: https://github.com/electron/electron/issues/10019\r\n\t */\r\n\tpublic get native(): Electron.BrowserWindow {\r\n\t\treturn this._internalWin;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets option \"triggerGlobalClose\" value.\r\n\t */\r\n\tpublic get triggerGlobalClose(): boolean {\r\n\t\treturn this._triggerGlobalClose;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets Electron native web contents.\r\n\t */\r\n\tpublic get webContents(): Electron.WebContents {\r\n\t\treturn this._internalWin.webContents;\r\n\t}\r\n\r\n\t/**\r\n\t * @param _name Name of this window\r\n\t */\r\n\tconstructor(\r\n\t\tprotected readonly _name: string,\r\n\t\tprivate _options?: BrowserWindowConstructorOptions\r\n\t) {\r\n\t\tlet options = this._options;\r\n\t\tthis._triggerGlobalClose = (options == null || options.triggerGlobalClose == null || options.triggerGlobalClose === true);\r\n\r\n\t\tthis._internalWin = new eltr.BrowserWindow(options);\r\n\t\tthis._internalWin.setTitle(this._name);\r\n\t\tthis.handleEvents();\r\n\t}\r\n\r\n\t/**\r\n\t * Do not call this method explicitly. It should be called in ElectronAppBase.addWindow\r\n\t */\r\n\tpublic abstract start(): void;\r\n\r\n\t/**\r\n\t * Clears HTTP cache.\r\n\t */\r\n\tpublic clearCache(): Promise<void> {\r\n\t\treturn new Promise<void>((resolve) => {\r\n\t\t\tthis._internalWin.webContents.session.clearCache(resolve);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Clears all types of storage, not including HTTP cache.\r\n\t */\r\n\tpublic clearStorage(): Promise<void> {\r\n\t\treturn new Promise<void>((resolve) => {\r\n\t\t\tlet options = {\r\n\t\t\t\tstorages: [\r\n\t\t\t\t\t'appcache',\r\n\t\t\t\t\t'cookies',\r\n\t\t\t\t\t'filesystem',\r\n\t\t\t\t\t'indexdb',\r\n\t\t\t\t\t'localstorage',\r\n\t\t\t\t\t'shadercache',\r\n\t\t\t\t\t'websql',\r\n\t\t\t\t\t'serviceworkers',\r\n\t\t\t\t],\r\n\t\t\t\tquotas: [\r\n\t\t\t\t\t'temporary',\r\n\t\t\t\t\t'persistent',\r\n\t\t\t\t\t'syncable',\r\n\t\t\t\t],\r\n\t\t\t\torigin: '*'\r\n\t\t\t};\r\n\r\n\t\t\teltr.session.defaultSession.clearStorageData(options, resolve);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Try to close the window. This has the same effect as a user manually clicking\r\n\t * the close button of the window. The web page may cancel the close though. See\r\n\t * the close event.\r\n\t */\r\n\tpublic close(): void {\r\n\t\tthis.native.close();\r\n\t}\r\n\r\n\t/**\r\n\t * Forces closing the window, the unload and beforeunload event won't be emitted for\r\n\t * the web page, and close event will also not be emitted for this window, but it\r\n\t * guarantees the closed event will be emitted.\r\n\t */\r\n\tpublic destroy(): void {\r\n\t\tthis.native.destroy();\r\n\t}\r\n\r\n\t/**\r\n\t * Focuses on the window.\r\n\t */\r\n\tpublic focus(): void {\r\n\t\tthis.native.focus();\r\n\t}\r\n\r\n\tpublic isFocused(): boolean {\r\n\t\treturn this.native.isFocused();\r\n\t}\r\n\r\n\tpublic isFullScreen(): boolean {\r\n\t\treturn this.native.isFullScreen();\r\n\t}\r\n\r\n\tpublic isKiosk(): boolean {\r\n\t\treturn this.native.isKiosk();\r\n\t}\r\n\r\n\tpublic isModal(): boolean {\r\n\t\treturn this.native.isModal();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximizes the window. This will also show (but not focus) the window if it isn't\r\n\t * being displayed already.\r\n\t */\r\n\tpublic maximize(): void {\r\n\t\tthis.native.maximize();\r\n\t}\r\n\r\n\t/**\r\n\t * Minimizes the window. On some platforms the minimized window will be shown in\r\n\t * the Dock.\r\n\t */\r\n\tpublic minimize(): void {\r\n\t\tthis.native.minimize();\r\n\t}\r\n\r\n\t/**\r\n\t * Reloads the current web page.\r\n\t */\r\n\tpublic reload(): void {\r\n\t\tthis.native.reload();\r\n\t}\r\n\r\n\t/**\r\n\t * Restores the window from minimized state to its previous state.\r\n\t */\r\n\tpublic restore(): void {\r\n\t\tthis.native.restore();\r\n\t}\r\n\r\n\t/**\r\n\t * Enters or leaves the kiosk mode.\r\n\t */\r\n\tpublic setKiosk(flag: boolean): void {\r\n\t\tthis.native.setKiosk(flag);\r\n\t}\r\n\r\n\t\r\n\tpublic showConfirmBox(title: string, content: string, detail?: string): Promise<boolean> {\r\n\t\treturn this.showMessageBox({\r\n\t\t\tbuttons: ['Yes', 'No'],\r\n\t\t\tmessage: content,\r\n\t\t\ttitle,\r\n\t\t\tdetail,\r\n\t\t\tdefaultId: 1, // 'No' should be selected by default\r\n\t\t\tcancelId: 1,\r\n\t\t\ttype: 'question',\r\n\t\t\tnoLink: true\r\n\t\t}).then((answer: any) => {\r\n\t\t\treturn (answer == 0);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Displays a modal dialog that shows an error message. This API can be called\r\n\t * safely before the ready event the app module emits, it is usually used to report\r\n\t * errors in early stage of startup.  If called before the app readyevent on Linux,\r\n\t * the message will be emitted to stderr, and no GUI dialog will appear.\r\n\t */\r\n\tpublic showErrorBox(title: string, content: string): void {\r\n\t\tthis.app.showErrorBox(title, content);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a dialog to select folders.\r\n\t * @return A promise to resolve to an array of selected paths (if )\r\n\t */\r\n\tpublic showOpenDialog(options?: Electron.OpenDialogOptions): Promise<string[]> {\r\n\t\treturn new Promise<string[]>((resolve, reject) => {\r\n\t\t\teltr.dialog.showOpenDialog(this.native, options, (filePaths: string[]) => {\r\n\t\t\t\t// When user closes dialog, `filePaths.length == 1, `filePaths[0]` == undefined\r\n\t\t\t\tif (filePaths && filePaths.length && filePaths[0]) {\r\n\t\t\t\t\tresolve(filePaths);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tresolve(null);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tpublic showSaveDialog(options?: Electron.SaveDialogOptions): Promise<string> {\r\n\t\treturn new Promise<string>((resolve, reject) => {\r\n\t\t\teltr.dialog.showSaveDialog(this.native, options, resolve);\r\n\t\t});\r\n\t}\r\n\r\n\tpublic showMessageBox(options?: Electron.MessageBoxOptions): Promise<{ response: number, checkboxChecked: boolean }> {\r\n\t\treturn new Promise<any>((resolve, reject) => {\r\n\t\t\teltr.dialog.showMessageBox(this.native, options, resolve);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Unmaximizes the window.\r\n\t */\r\n\tpublic unmaximize(): void {\r\n\t\tthis.native.unmaximize();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets whether the window should be in fullscreen mode.\r\n\t */\r\n\tpublic setFullScreen(flag: boolean): void {\r\n\t\tthis.native.setFullScreen(flag);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Builds and gets absolute path from specified file path.\r\n\t * @param filePath Relative path to .html file.\r\n\t */\r\n\tprotected getView(filePath: string): string {\r\n\t\treturn path.join(this._app.viewRoot, filePath);\r\n\t}\r\n\r\n\t/**\r\n\t * Loads view from specified file path.\r\n\t * @param filePath Relative path to .html file.\r\n\t */\r\n\tprotected loadView(filePath: string, options?: Electron.LoadURLOptions): void {\r\n\t\tlet resource = 'file://' + this.getView(filePath);\r\n\t\tthis._internalWin.loadURL(resource);\r\n\t}\r\n\r\n\t/**\r\n\t * Occurs when the window is going to be closed.\r\n\t * It’s emitted before the beforeunload and unload event of the DOM.\r\n\t * Calling event.preventDefault() will cancel the close.\r\n\t */\r\n\tprotected onClosing(event: Electron.Event): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Occurs after the window has been closed. \r\n\t * After you have received this event you should remove \r\n\t * the reference to the window and avoid using it any more.\r\n\t */\r\n\tprotected onClosed(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Occurs when the window loses focus.\r\n\t */\r\n\tprotected onBlur(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Occurs when the window gains focus.\r\n\t */\r\n\tprotected onFocus(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Occurs when the web page has been rendered \r\n\t * (while not being shown) and window can be displayed without a visual flash.\r\n\t */\r\n\tprotected onShowing(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Occurs after the window has been shown.\r\n\t */\r\n\tprotected onShown(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Occurs when the spinner of the tab started spinning.\r\n\t */\r\n\tprotected onContentLoading(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Occurs when the navigation is done, i.e. the spinner of the tab has stopped\r\n     * spinning, and the onload event was dispatched.\r\n\t */\r\n\tprotected onContentLoaded(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Occurs when the document in the given frame is loaded.\r\n\t */\r\n\tprotected onContentDomReady(event: Electron.Event) {\r\n\t}\r\n\r\n\r\n\tprivate handleEvents(): void {\r\n\t\t// Don't pass in a function like this: `this.on('close', this.onClosing.bind(this));`\r\n\t\t// Because `onClosing` can be overriden by children class.\r\n\t\tlet win = this._internalWin;\r\n\t\twin.on('close', (event: Electron.Event) => this.onClosing(event));\r\n\t\twin.on('closed', () => this.onClosed());\r\n\t\twin.on('blur', () => this.onBlur());\r\n\t\twin.on('focus', () => this.onFocus());\r\n\t\twin.on('ready-to-show', () => this.onShowing());\r\n\t\twin.on('show', () => this.onShown());\r\n\t\twin.webContents.on('did-start-loading', () => this.onContentLoading());\r\n\t\twin.webContents.on('did-finish-load', () => this.onContentLoaded());\r\n\t\twin.webContents.on('dom-ready', (event: Electron.Event) => this.onContentDomReady(event));\r\n\t}\r\n}"]}